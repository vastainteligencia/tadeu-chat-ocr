import streamlit as st
import openai
import tempfile

st.set_page_config(page_title="Chat de OCR com Tadeu", page_icon="ü§ñ")
st.title("Chat de OCR com Tadeu ü§ñüìÑ")

openai.api_key = st.secrets["OPENAI_API_KEY"]

# Mensagem inicial do sistema
if "messages" not in st.session_state:
    st.session_state["messages"] = [
        {
            "role": "system",
            "content": (
                "Voc√™ √© o Tadeu, um agente GPT especialista em registros imobili√°rios, designado para analisar matr√≠culas de im√≥veis, registros, averba√ß√µes e documentos complementares (certid√µes, contratos, textos extra√≠dos via OCR, entre outros). "
                "Sua miss√£o √© extrair, identificar e padronizar os seguintes dados:\n"
                "üîπ N√∫mero da fra√ß√£o ideal\n"
                "üîπ Forma do t√≠tulo (ex: Escritura de Compra e Venda, Livro SI-3890, fl. 13, 18¬∫ Of√≠cio de Notas)\n"
                "üîπ Transmitente (vendedor, permutante, cedente etc)\n"
                "üîπ Adquirente (comprador, cession√°rio etc)\n"
                "üîπ Data, cart√≥rio e natureza jur√≠dica do ato\n"
                "üîπ √înus reais, restri√ß√µes, penhoras, hipotecas, usufrutos, cl√°usulas restritivas ou quaisquer encargos\n"
                "üîπ In√≠cio e sequ√™ncia da cadeia dominial do im√≥vel\n"
                "üîπ Averba√ß√µes relevantes (casamentos, falecimentos, constru√ß√µes, entre outros)\n\n"

                "‚ö†Ô∏è Regras essenciais de conduta:\n"
                "1Ô∏è‚É£ Fa√ßa leitura linha por linha, sem pular nenhuma informa√ß√£o.\n"
                "2Ô∏è‚É£ Nunca crie ou assuma dados n√£o expressos no texto.\n"
                "3Ô∏è‚É£ Em caso de d√∫vida, inconsist√™ncia ou erro, classifique e reporte conforme abaixo.\n"
                "4Ô∏è‚É£ Suas conclus√µes ser√£o utilizadas como base jur√≠dica ou t√©cnica ‚Äî aja com responsabilidade.\n\n"

                "üìã Classifica√ß√£o de inconsist√™ncias:\n"
                "‚Ä¢ Grau 1 ‚Äì Leve: Erros de grafia ou formata√ß√£o, sem impacto interpretativo.\n"
                "‚Ä¢ Grau 2 ‚Äì Moderado: Informa√ß√µes incompletas, mas parcialmente leg√≠veis.\n"
                "‚Ä¢ Grau 3 ‚Äì Grave: Aus√™ncia de partes essenciais, ambiguidade jur√≠dica, quebra da cadeia de dom√≠nio ou falta de ato formal.\n\n"

                "üßæ Sempre finalize com uma conclus√£o objetiva sobre o registro, indicando:\n"
                "‚úîÔ∏è Se h√° ou n√£o √¥nus\n"
                "‚úîÔ∏è Quais os riscos potenciais para o im√≥vel\n"
                "‚úîÔ∏è E se a matr√≠cula est√° regular ou demanda revis√£o humana\n\n"

                "üß† Lembre-se: voc√™ √© um auditor jur√≠dico automatizado. Nada deve escapar √† sua an√°lise. "
                "Toda resposta deve estar padronizada conforme as diretrizes do Dr. Guilherme Martins, sem exce√ß√µes. Nunca invente. Nunca omita. Nunca negligencie. "
            )
        }
    ]

# Upload de arquivos OCR
uploaded_file = st.file_uploader("üì§ Envie um arquivo OCR (PDF, imagem ou texto)...", type=["pdf", "txt", "jpg", "png", "jpeg"])

# Se o arquivo for enviado, tentar extrair o conte√∫do (linha por linha)
if uploaded_file is not None:
    try:
        file_content = uploaded_file.read().decode("utf-8", errors="ignore")
        linhas = file_content.splitlines()
        texto_formatado = "\n".join(f"Linha {i+1}: {linha.strip()}" for i, linha in enumerate(linhas))
        st.text_area("üìÑ Conte√∫do OCR extra√≠do", texto_formatado, height=300)
        st.session_state["messages"].append({"role": "user", "content": texto_formatado})
        st.chat_message("user").markdown(texto_formatado)
    except Exception as e:
        st.error(f"‚ùå Erro ao processar o arquivo: {e}")

# Entrada manual opcional (sem upload)
prompt = st.chat_input("‚úèÔ∏è Digite aqui sua pergunta ou envie o texto OCR...")

if prompt:
    st.session_state["messages"].append({"role": "user", "content": prompt})
    st.chat_message("user").markdown(prompt)

# Envio para o GPT (se houver conte√∫do do usu√°rio)
if len(st.session_state["messages"]) > 1:
    try:
        client = openai.OpenAI()
        response = client.chat.completions.create(
            model="gpt-4-turbo",
            messages=st.session_state["messages"]
        )
        reply = response.choices[0].message.content
        st.session_state["messages"].append({"role": "assistant", "content": reply})
        st.chat_message("assistant").markdown(reply)

        # Criar arquivo tempor√°rio com resposta
        with tempfile.NamedTemporaryFile(delete=False, mode="w", suffix=".txt", encoding="utf-8") as f:
            f.write(reply)
            temp_path = f.name

        # Bot√£o para baixar o parecer
        with open(temp_path, "r", encoding="utf-8") as f:
            st.download_button("üì• Baixar resposta do Tadeu", f, file_name="resultado_tadeu.txt")

    except Exception as e:
        st.error(f"‚ùå Erro durante a comunica√ß√£o com o modelo: {e}")
